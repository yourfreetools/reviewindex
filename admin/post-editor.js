// post-editor.js - Complete Enhanced Version
const CLOUDFLARE_FUNCTION_URL = '/api/create-post';

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeEditor();
});

function initializeEditor() {
    // Character counting and SEO scoring
    setupCharacterCounters();
    setupAutoSlugGeneration();
    setupPreviewFunctionality();
    setupFormSubmission();
    setDefaultValues();
}

// Character counting and SEO scoring
function setupCharacterCounters() {
    const fieldsToMonitor = [
        { id: 'title', countId: 'titleCount', min: 40, max: 65 },
        { id: 'description', countId: 'descCount', min: 140, max: 160 },
        { id: 'content', countId: 'contentCount', min: 300, ideal: 800 }
    ];

    fieldsToMonitor.forEach(field => {
        const input = document.getElementById(field.id);
        const counter = document.getElementById(field.countId);
        
        if (input && counter) {
            input.addEventListener('input', function() {
                const length = this.value.length;
                counter.textContent = `${length} characters`;
                
                // Update color coding
                counter.className = 'char-count';
                if (field.id === 'description') {
                    if (length < 100) counter.classList.add('danger');
                    else if (length < field.min) counter.classList.add('warning');
                    else if (length > field.max) counter.classList.add('warning');
                } else if (field.id === 'title') {
                    if (length < field.min) counter.classList.add('danger');
                    else if (length > field.max) counter.classList.add('warning');
                } else if (field.id === 'content') {
                    if (length < 300) counter.classList.add('danger');
                    else if (length < 500) counter.classList.add('warning');
                }
                
                updateSEOScore();
            });
            
            // Initial count
            input.dispatchEvent(new Event('input'));
        }
    });
}

// Auto-generate filename from title
function setupAutoSlugGeneration() {
    const titleInput = document.getElementById('title');
    const filenameInput = document.getElementById('filename');
    
    if (titleInput && filenameInput) {
        titleInput.addEventListener('input', function() {
            if (!filenameInput.value || filenameInput.dataset.autoGenerated === 'true') {
                const slug = this.value
                    .toLowerCase()
                    .replace(/[^a-z0-9]+/g, '-')
                    .replace(/(^-|-$)+/g, '');
                
                filenameInput.value = slug;
                filenameInput.dataset.autoGenerated = 'true';
            }
        });
        
        filenameInput.addEventListener('input', function() {
            this.dataset.autoGenerated = 'false';
        });
    }
}

// SEO Score calculation
function updateSEOScore() {
    const titleLength = document.getElementById('title')?.value.length || 0;
    const descLength = document.getElementById('description')?.value.length || 0;
    const contentLength = document.getElementById('content')?.value.length || 0;
    
    // Update score displays if they exist
    updateScoreDisplay('titleScore', titleLength, 40, 65);
    updateScoreDisplay('descScore', descLength, 140, 160);
    updateScoreDisplay('contentScore', contentLength, 300, 800);
    
    // Overall score
    const overallScore = document.getElementById('overallScore');
    if (overallScore) {
        const ready = titleLength > 0 && descLength >= 100 && contentLength >= 300;
        if (ready) {
            overallScore.textContent = 'Ready to Publish';
            overallScore.className = 'score-good';
        } else {
            overallScore.textContent = 'Needs More Content';
            overallScore.className = 'score-bad';
        }
    }
}

function updateScoreDisplay(elementId, length, min, ideal) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    if (length === 0) {
        element.textContent = 'Missing';
        element.className = 'score-bad';
    } else if (length >= ideal) {
        element.textContent = 'Excellent';
        element.className = 'score-good';
    } else if (length >= min) {
        element.textContent = 'Good';
        element.className = 'score-good';
    } else if (length >= min * 0.7) {
        element.textContent = 'Needs Work';
        element.className = 'score-warning';
    } else {
        element.textContent = 'Too Short';
        element.className = 'score-bad';
    }
}

// Preview functionality
function setupPreviewFunctionality() {
    const previewBtn = document.getElementById('previewBtn');
    const previewSection = document.getElementById('previewSection');
    
    if (previewBtn && previewSection) {
        previewBtn.addEventListener('click', function() {
            if (previewSection.style.display === 'none') {
                generatePreview();
                previewSection.style.display = 'block';
                this.innerHTML = '<span>üëÅÔ∏è</span> Hide Preview';
            } else {
                previewSection.style.display = 'none';
                this.innerHTML = '<span>üëÅÔ∏è</span> Preview SEO Markdown';
            }
        });
    }
}

function generatePreview() {
    const title = document.getElementById('title').value || 'Product Title Review';
    const description = document.getElementById('description').value || 'Product description for SEO';
    const rating = document.getElementById('rating').value || '4';
    const keyFeatures = document.getElementById('keyFeatures').value || 'No key features listed yet';
    const pros = document.getElementById('pros').value || 'No pros listed yet';
    const cons = document.getElementById('cons').value || 'No cons listed yet';
    const finalVerdict = document.getElementById('finalVerdict').value || 'No final verdict provided yet';
    const content = document.getElementById('content').value || 'Detailed review content will appear here...';
    const categories = document.getElementById('categories').value || 'electronics, review';
    
    const previewContent = document.getElementById('previewContent');
    if (previewContent) {
        previewContent.innerHTML = `
            <div style="font-family: 'Courier New', monospace; font-size: 0.9rem; line-height: 1.4;">
                <div style="color: #6c757d; margin-bottom: 20px;">---</div>
                <div><strong>title:</strong> "${title}"</div>
                <div><strong>description:</strong> "${description.substring(0, 100)}..."</div>
                <div><strong>rating:</strong> ${rating}</div>
                <div><strong>categories:</strong> [${categories.split(',').map(c => `"${c.trim()}"`).join(', ')}]</div>
                <div style="color: #6c757d; margin: 20px 0;">---</div>
                <div style="margin-bottom: 15px;"><strong># ${title}</strong></div>
                <div style="margin-bottom: 15px;">${content.substring(0, 200)}...</div>
                <div style="color: #007bff;"><strong>## Key Features</strong></div>
                <ul style="margin-left: 20px;">
                    ${keyFeatures.split('\n').filter(f => f.trim()).map(feature => `<li>${feature}</li>`).join('')}
                </ul>
                <div style="color: #28a745;"><strong>## üëç Pros</strong></div>
                <ul style="margin-left: 20px;">
                    ${pros.split('\n').filter(p => p.trim()).map(pro => `<li>${pro}</li>`).join('')}
                </ul>
                <div style="color: #dc3545;"><strong>## üëé Cons</strong></div>
                <ul style="margin-left: 20px;">
                    ${cons.split('\n').filter(c => c.trim()).map(con => `<li>${con}</li>`).join('')}
                </ul>
                <div style="margin-top: 15px;"><strong>## Final Verdict: ${rating}/5 ‚≠ê</strong></div>
                <div style="margin-bottom: 15px;">${finalVerdict.substring(0, 200)}...</div>
                <div style="color: #6c757d; margin-top: 20px;">... and schema.org markup</div>
            </div>
        `;
    }
}

// Form submission
function setupFormSubmission() {
    const form = document.getElementById('postForm');
    if (form) {
        form.addEventListener('submit', handleFormSubmission);
    }
}

async function handleFormSubmission(event) {
    event.preventDefault();
    
    const formData = {
        title: document.getElementById('title').value,
        filename: document.getElementById('filename').value,
        description: document.getElementById('description').value,
        image: document.getElementById('image').value,
        rating: document.getElementById('rating').value,
        affiliateLink: document.getElementById('affiliateLink').value,
        youtubeLink: document.getElementById('youtubeLink').value,
        keyFeatures: document.getElementById('keyFeatures').value, // NEW FIELD
        finalVerdict: document.getElementById('finalVerdict').value, // NEW FIELD
        pros: document.getElementById('pros').value,
        cons: document.getElementById('cons').value,
        content: document.getElementById('content').value,
        categories: document.getElementById('categories').value
    };
    
    const submitButton = document.getElementById('submitButton');
    const statusDiv = document.getElementById('statusMessage');
    
    // Validation
    if (!formData.title || !formData.filename) {
        showStatus('‚ùå Title and Filename are required for SEO.', 'error');
        return;
    }
    
    if (formData.description.length < 100) {
        if (!confirm('‚ö†Ô∏è Your description is very short. This may affect SEO. Continue anyway?')) {
            return;
        }
    }
    
    if (formData.content.length < 300) {
        if (!confirm('‚ö†Ô∏è Your review content is very short. Google prefers comprehensive content. Continue anyway?')) {
            return;
        }
    }
    
    submitButton.disabled = true;
    submitButton.innerHTML = '<span>‚è≥</span> Publishing SEO Review...';
    showStatus('‚è≥ Creating SEO-optimized review and publishing to GitHub...', 'info');
    
    try {
        console.log('Sending SEO review data to:', CLOUDFLARE_FUNCTION_URL);
        
        const response = await fetch(CLOUDFLARE_FUNCTION_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });
        
        console.log('Response status:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('API Response:', result);
        
        if (result.success) {
            showStatus(`
                <div style="font-size: 1.2rem; margin-bottom: 15px;">‚úÖ ${result.message}</div>
                <div class="success-links">
                    <p>üìÅ <strong>GitHub File:</strong> <a href="${result.data.url}" target="_blank">View on GitHub</a></p>
                    <p>üåê <strong>Live URL:</strong> <a href="${result.data.siteUrl}" target="_blank">${result.data.siteUrl}</a></p>
                    <p>üöÄ <strong>Next:</strong> Cloudflare Pages will auto-rebuild your site (1-2 minutes)</p>
                </div>
            `, 'success');
            
            // Reset form
            document.getElementById('postForm').reset();
            const filenameInput = document.getElementById('filename');
            filenameInput.dataset.autoGenerated = 'true';
            updateSEOScore();
            
        } else {
            throw new Error(result.message || 'Unknown error occurred');
        }
        
    } catch (error) {
        console.error("Publishing Error:", error);
        showStatus(`
            ‚ùå Error: ${error.message}
            <div style="margin-top: 10px; font-size: 0.9rem;">
                Check browser console (F12) for details. Ensure GITHUB_TOKEN is set in Cloudflare.
            </div>
        `, 'error');
    } finally {
        submitButton.disabled = false;
        submitButton.innerHTML = '<span>üöÄ</span> Publish to GitHub';
    }
}

// Status message display
function showStatus(message, type) {
    const statusDiv = document.getElementById('statusMessage');
    if (statusDiv) {
        statusDiv.innerHTML = message;
        statusDiv.className = 'status-message';
        statusDiv.classList.add(`status-${type}`);
        statusDiv.style.display = 'block';
        
        // Auto-hide success messages after 10 seconds
        if (type === 'success') {
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 10000);
        }
    }
}

// Set default values
function setDefaultValues() {
    const ratingSelect = document.getElementById('rating');
    if (ratingSelect) {
        ratingSelect.value = '4';
    }
    
    // Initialize SEO score
    updateSEOScore();
}

// Export for potential module usage
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        initializeEditor,
        updateSEOScore,
        generatePreview
    };
}
