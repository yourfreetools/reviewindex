// functions/comparison/[...slug].js
export async function onRequest(context) {
    const { request, params, env } = context;
    const slug = params.slug;
    
    // Generate cache key for the entire page
    const cacheKey = new Request(request.url, request);
    const cache = caches.default;
    
    // Try to get from cache first
    let response = await cache.match(cacheKey);
    if (response) {
        console.log('‚úÖ COMPARISON PAGE Cache HIT for:', slug);
        return response;
    }
    console.log('üîÑ COMPARISON PAGE Cache MISS for:', slug);
    
    try {
        // If it's a direct file request for .md, redirect to proper URL
        if (slug.endsWith('.md')) {
            const cleanSlug = slug.replace('.md', '');
            return Response.redirect(`${new URL(request.url).origin}/comparison/${cleanSlug}`, 301);
        }

        // Fetch the comparison content
        const comparisonContent = await fetchComparisonContent(slug, env.GITHUB_TOKEN);
        
        if (!comparisonContent) {
            return renderComparisonErrorPage('Comparison not found', 'The requested comparison could not be found.');
        }

        // Parse comparison markdown
        const { frontmatter: comparisonFrontmatter, content } = parseComparisonMarkdown(comparisonContent);
        
        // Convert markdown to HTML with improved processing
        const htmlContent = convertComparisonMarkdownToHTML(content);
        
        // Get latest comparisons for related section
        const latestComparisons = await fetchLatestComparisons(env.GITHUB_TOKEN, 2);

        // Render the comparison page
        const fullHtml = await renderComparisonPage(
            comparisonFrontmatter,
            htmlContent, 
            slug, 
            request.url, 
            latestComparisons
        );
        
        // Create response with cache headers
        response = new Response(fullHtml, {
            headers: { 
                'Content-Type': 'text/html; charset=utf-8',
                'X-Content-Type-Options': 'nosniff',
                'X-Frame-Options': 'DENY',
                'Cache-Control': 'public, max-age=15552000'
            }
        });
        
        // Store in cache for future requests
        context.waitUntil(cache.put(cacheKey, response.clone()));
        return response;

    } catch (error) {
        console.error('Error rendering comparison page:', error);
        return renderComparisonErrorPage('Server Error', 'An error occurred while loading the comparison.');
    }
}

// ==================== CORE FUNCTIONS ====================

async function fetchComparisonContent(slug, githubToken) {
    const REPO_OWNER = 'yourfreetools';
    const REPO_NAME = 'reviewindex';
    const filePath = `content/comparisons/${slug}.md`;

    try {
        const response = await fetch(
            `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/${filePath}`,
            {
                headers: {
                    'Authorization': `token ${githubToken}`,
                    'User-Agent': 'Review-Index-App',
                    'Accept': 'application/vnd.github.v3.raw'
                }
            }
        );

        if (response.status === 200) {
            return await response.text();
        }
        return null;
    } catch (error) {
        console.error('Error fetching comparison:', error);
        return null;
    }
}

function parseComparisonMarkdown(content) {
    const frontmatter = {};
    let markdownContent = content;
    
    if (content.startsWith('---')) {
        const end = content.indexOf('---', 3);
        if (end !== -1) {
            const yaml = content.substring(3, end).trim();
            markdownContent = content.substring(end + 3).trim();
            
            yaml.split('\n').forEach(line => {
                const colon = line.indexOf(':');
                if (colon > 0) {
                    const key = line.substring(0, colon).trim();
                    let value = line.substring(colon + 1).trim();
                    
                    // Handle different value types
                    if (value.startsWith('"') && value.endsWith('"')) {
                        value = value.substring(1, value.length - 1);
                    } else if (value.startsWith("'") && value.endsWith("'")) {
                        value = value.substring(1, value.length - 1);
                    } else if (value.startsWith('[') && value.endsWith(']')) {
                        value = value.substring(1, value.length - 1).split(',').map(item => item.trim().replace(/["']/g, ''));
                    } else if (value === 'true') {
                        value = true;
                    } else if (value === 'false') {
                        value = false;
                    }
                    
                    frontmatter[key] = value;
                }
            });
        }
    }
    
    return { frontmatter, content: markdownContent };
}

function convertComparisonMarkdownToHTML(markdown) {
    let html = markdown;

    // Process images first - ensure proper responsive handling
    html = html.replace(/!\[(.*?)\]\((.*?)\)/g, '<div class="responsive-image"><img src="$2" alt="$1" loading="lazy"></div>');

    // Process comparison table
    html = html.replace(/## üìã Detailed Comparison Table[\s\S]*?(?=## |$)/g, processComparisonTable);

    // Process quick verdict section
    html = html.replace(/### üèÜ Quick Verdict[\s\S]*?(?=## |$)/g, processQuickVerdict);

    // Process product analysis sections
    html = html.replace(/---\s*### ([^\n]+)[\s\S]*?(?=---|$)/g, processProductAnalysis);

    // Process pros and cons lists
    html = processProsAndCons(html);

    // Process specifications tables
    html = processSpecifications(html);

    // Standard markdown conversions
    html = html
        .replace(/^# (.*)$/gm, '<h2>$1</h2>')
        .replace(/^## (.*)$/gm, '<h3>$1</h3>')
        .replace(/^### (.*)$/gm, '<h4>$1</h4>')
        .replace(/^#### (.*)$/gm, '<h5>$1</h5>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/`([^`]+)`/g, '<code>$1</code>')
        .replace(/^> (.*)$/gm, '<blockquote>$1</blockquote>')
        .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="external-link">$1</a>');

    // Process lists properly
    html = processLists(html);

    // Clean up empty paragraphs and fix spacing
    html = html
        .replace(/<p><\/p>/g, '')
        .replace(/(<\/h[2-5]>)\s*<p>/g, '$1')
        .replace(/<\/p>\s*(<h[2-5]>)/g, '$1')
        .replace(/<p>(<ul>.*?<\/ul>)<\/p>/g, '$1')
        .replace(/<p>(<blockquote>.*?<\/blockquote>)<\/p>/g, '$1');

    return html;
}

// ==================== MARKDOWN PROCESSING HELPERS ====================

function processComparisonTable(tableSection) {
    const lines = tableSection.split('\n');
    let headers = [];
    let rows = [];
    let inTable = false;

    for (const line of lines) {
        const trimmedLine = line.trim();
        
        if (trimmedLine.startsWith('|') && trimmedLine.endsWith('|')) {
            inTable = true;
            const cells = trimmedLine.split('|').slice(1, -1).map(cell => cell.trim());
            
            if (cells.length > 0) {
                if (headers.length === 0 && !cells[0].includes('---')) {
                    headers = cells;
                } else if (!cells[0].includes('---')) {
                    rows.push(cells);
                }
            }
        } else if (inTable && trimmedLine && !trimmedLine.startsWith('|')) {
            break;
        }
    }

    if (headers.length === 0 || rows.length === 0) {
        return tableSection;
    }

    let tableHTML = `
    <div class="comparison-table-section">
        <h3>üìã Detailed Comparison</h3>
        <div class="table-container">
            <table class="comparison-table" aria-label="Product comparison table">
                <thead>
                    <tr>
    `;
    
    headers.forEach(header => {
        tableHTML += `<th scope="col">${escapeHtml(header)}</th>`;
    });
    
    tableHTML += `
                    </tr>
                </thead>
                <tbody>
    `;
    
    rows.forEach(row => {
        tableHTML += '<tr>';
        row.forEach((cell, index) => {
            const isFirstCell = index === 0;
            const cellTag = isFirstCell ? 'th scope="row"' : 'td';
            let processedCell = processTableCell(cell);
            
            tableHTML += `<${cellTag}>${processedCell}</${isFirstCell ? 'th' : 'td'}>`;
        });
        tableHTML += '</tr>';
    });
    
    tableHTML += `
                </tbody>
            </table>
        </div>
    </div>
    `;
    
    return tableHTML;
}

function processTableCell(cell) {
    // Process ratings
    if (cell.includes('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê')) {
        return cell.replace('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', '<span class="rating full">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</span> <span class="rating-text">5/5</span>');
    } else if (cell.includes('‚≠ê‚≠ê‚≠ê')) {
        return cell.replace('‚≠ê‚≠ê‚≠ê', '<span class="rating partial">‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ</span> <span class="rating-text">3/5</span>');
    }
    
    // Process prices
    if (cell.includes('$')) {
        return `<span class="price">${cell}</span>`;
    }
    
    // Process checkmarks and crosses
    if (cell.includes('‚úÖ')) {
        return cell.replace('‚úÖ', '<span class="checkmark">‚úì</span>');
    } else if (cell.includes('‚ùå')) {
        return cell.replace('‚ùå', '<span class="cross">‚úó</span>');
    }
    
    // Process links
    if (cell.includes('Check Price')) {
        return cell.replace(/Check Price/g, '<button class="price-button">Check Price</button>');
    }
    
    return escapeHtml(cell);
}

function processQuickVerdict(verdictSection) {
    const lines = verdictSection.split('\n');
    let verdictHTML = '<div class="quick-verdict-section"><h3>üèÜ Quick Verdict</h3><div class="verdict-grid">';
    
    lines.forEach(line => {
        const trimmedLine = line.trim();
        
        if (trimmedLine.startsWith('üèÜ') || trimmedLine.startsWith('üí∞') || trimmedLine.startsWith('‚ö°')) {
            const parts = trimmedLine.split('**');
            const icon = parts[0].trim();
            const title = parts[1] || '';
            const description = parts[2] || '';
            
            verdictHTML += `
            <div class="verdict-card">
                <div class="verdict-icon">${icon}</div>
                <div class="verdict-content">
                    <h4>${title}</h4>
                    <p>${description}</p>
                </div>
            </div>`;
        }
    });
    
    verdictHTML += '</div></div>';
    return verdictHTML;
}

function processProductAnalysis(analysisSection) {
    const productMatch = analysisSection.match(/### ([^\n]+)/);
    if (!productMatch) return analysisSection;
    
    const productName = productMatch[1].trim();
    let content = analysisSection.replace(/### [^\n]+\n/, '');
    
    // Extract image if present
    let imageHTML = '';
    const imageMatch = content.match(/<div class="responsive-image">.*?<\/div>/);
    if (imageMatch) {
        imageHTML = imageMatch[0];
        content = content.replace(imageMatch[0], '');
    }
    
    // Extract price and rating
    const priceMatch = content.match(/\*\*Price:\*\* ([^\n]+)/);
    const ratingMatch = content.match(/\*\*Overall Rating:\*\* ([^\n]+)/);
    
    return `
    <section class="product-analysis" aria-labelledby="${slugify(productName)}">
        <div class="product-header">
            <h3 id="${slugify(productName)}">${productName}</h3>
            ${priceMatch ? `<div class="product-price">${priceMatch[1]}</div>` : ''}
            ${ratingMatch ? `<div class="product-rating">${ratingMatch[1]}</div>` : ''}
        </div>
        ${imageHTML}
        <div class="product-content">
            ${convertStandardMarkdown(content)}
        </div>
    </section>
    `;
}

function processProsAndCons(html) {
    // Process pros sections
    html = html.replace(/#### Pros[\s\S]*?(?=####|$)/g, (match) => {
        const items = match.split('\n').filter(line => line.includes('‚úÖ')).map(line => 
            line.replace('‚úÖ', '').trim()
        );
        if (items.length === 0) return match;
        
        return `
        <div class="pros-cons-section">
            <h5>Pros</h5>
            <ul class="pros-list">
                ${items.map(item => `<li>${item}</li>`).join('')}
            </ul>
        </div>`;
    });
    
    // Process cons sections
    html = html.replace(/#### Cons[\s\S]*?(?=####|$)/g, (match) => {
        const items = match.split('\n').filter(line => line.includes('‚ùå')).map(line => 
            line.replace('‚ùå', '').trim()
        );
        if (items.length === 0) return match;
        
        return `
        <div class="pros-cons-section">
            <h5>Cons</h5>
            <ul class="cons-list">
                ${items.map(item => `<li>${item}</li>`).join('')}
            </ul>
        </div>`;
    });
    
    return html;
}

function processSpecifications(html) {
    return html.replace(/#### Specifications[\s\S]*?(?=####|$)/g, (match) => {
        const lines = match.split('\n').filter(line => line.includes('|') && !line.includes('---'));
        if (lines.length === 0) return match;
        
        let specHTML = '<div class="specifications"><h5>Specifications</h5><div class="specs-grid">';
        
        lines.forEach(line => {
            const cells = line.split('|').slice(1, -1).map(cell => cell.trim());
            if (cells.length === 2) {
                specHTML += `
                <div class="spec-item">
                    <span class="spec-label">${cells[0].replace('**', '').replace('**', '')}</span>
                    <span class="spec-value">${cells[1]}</span>
                </div>`;
            }
        });
        
        specHTML += '</div></div>';
        return specHTML;
    });
}

function processLists(html) {
    const lines = html.split('\n');
    let processedLines = [];
    let inList = false;
    let listItems = [];
    let listType = 'ul';

    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        
        if (!line) {
            if (inList && listItems.length > 0) {
                processedLines.push(`<${listType}>${listItems.join('')}</${listType}>`);
                listItems = [];
                inList = false;
            }
            continue;
        }

        if (line.startsWith('- ') || line.startsWith('* ') || /^\d+\./.test(line)) {
            if (!inList) {
                inList = true;
                listType = /^\d+\./.test(line) ? 'ol' : 'ul';
            }
            const listItemContent = line.replace(/^(- |\* |\d+\.)/, '').trim();
            listItems.push(`<li>${listItemContent}</li>`);
        } else {
            if (inList && listItems.length > 0) {
                processedLines.push(`<${listType}>${listItems.join('')}</${listType}>`);
                listItems = [];
                inList = false;
            }
            
            if (line.startsWith('<')) {
                processedLines.push(line);
            } else {
                processedLines.push(`<p>${line}</p>`);
            }
        }
    }

    if (inList && listItems.length > 0) {
        processedLines.push(`<${listType}>${listItems.join('')}</${listType}>`);
    }

    return processedLines.join('\n');
}

// ==================== DATA FETCHING ====================

async function fetchAllComparisonsMetadata(githubToken) {
    const REPO_OWNER = 'yourfreetools';
    const REPO_NAME = 'reviewindex';
    
    try {
        const response = await fetch(
            `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/content/comparisons`,
            {
                headers: {
                    'Authorization': `token ${githubToken}`,
                    'User-Agent': 'Review-Index-App',
                    'Accept': 'application/vnd.github.v3+json'
                }
            }
        );

        if (response.status === 200) {
            const files = await response.json();
            const markdownFiles = files.filter(file => file.name.endsWith('.md'));
            
            const comparisonsMetadata = [];
            
            for (const file of markdownFiles.slice(0, 15)) {
                try {
                    const slug = file.name.replace('.md', '');
                    const contentResponse = await fetch(
                        `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/content/comparisons/${file.name}`,
                        {
                            headers: {
                                'Authorization': `token ${githubToken}`,
                                'User-Agent': 'Review-Index-App',
                                'Accept': 'application/vnd.github.v3.raw'
                            }
                        }
                    );
                    
                    if (contentResponse.status === 200) {
                        const content = await contentResponse.text();
                        const firstLines = content.split('\n').slice(0, 15).join('\n');
                        const { frontmatter } = parseComparisonMarkdown(firstLines + '\n---\n');
                        
                        comparisonsMetadata.push({
                            slug: slug,
                            title: frontmatter.title,
                            description: frontmatter.description,
                            image: frontmatter.featured_image,
                            categories: frontmatter.categories
                        });
                    }
                } catch (error) {
                    console.error('Error processing comparison file:', file.name, error);
                    continue;
                }
            }
            
            return comparisonsMetadata;
        }
        
        return [];
        
    } catch (error) {
        console.error('Error fetching comparisons metadata:', error);
        return [];
    }
}

async function fetchLatestComparisons(githubToken, limit = 2) {
    try {
        const allComparisons = await fetchAllComparisonsMetadata(githubToken);
        return allComparisons.slice(0, limit);
    } catch (error) {
        console.error('Error fetching latest comparisons:', error);
        return [];
    }
}

// ==================== RENDERING ====================

async function renderComparisonPage(frontmatter, htmlContent, slug, requestUrl, latestComparisons = []) {
    const canonicalUrl = `https://reviewindex.pages.dev/comparison/${slug}`;
    const schemaMarkup = generateComparisonSchemaMarkup(frontmatter, slug, canonicalUrl);
    const socialImage = frontmatter.featured_image || 'https://reviewindex.pages.dev/default-comparison-social.jpg';

    const latestComparisonsHTML = generateLatestComparisonsHTML(latestComparisons);

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${escapeHtml(frontmatter.title || formatSlug(slug))} - ReviewIndex</title>
    <meta name="description" content="${escapeHtml(frontmatter.description || 'Detailed product comparison and analysis')}">
    <link rel="canonical" href="${canonicalUrl}">
    
    <!-- Open Graph -->
    <meta property="og:title" content="${escapeHtml(frontmatter.title || formatSlug(slug))}">
    <meta property="og:description" content="${escapeHtml(frontmatter.description || 'Detailed product comparison and analysis')}">
    <meta property="og:type" content="article">
    <meta property="og:url" content="${canonicalUrl}">
    <meta property="og:image" content="${escapeHtml(socialImage)}">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:site_name" content="ReviewIndex">
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="${escapeHtml(frontmatter.title || formatSlug(slug))}">
    <meta name="twitter:description" content="${escapeHtml(frontmatter.description || 'Detailed product comparison and analysis')}">
    <meta name="twitter:image" content="${escapeHtml(socialImage)}">
    <meta name="twitter:image:alt" content="${escapeHtml(frontmatter.title || formatSlug(slug))} product comparison">
    
    <!-- Schema.org JSON-LD -->
    <script type="application/ld+json">
    ${schemaMarkup}
    </script>
    
    <style>
        /* Reset and Base Styles */
        * { 
            margin: 0; 
            padding: 0; 
            box-sizing: border-box; 
        }
        
        body { 
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif; 
            line-height: 1.6; 
            color: #1f2937;
            background: #f8fafc;
            padding: 0;
            min-height: 100vh;
        }
        
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white;
            min-height: 100vh;
            box-shadow: 0 0 20px rgba(0,0,0,0.08);
        }
        
        /* Header Styles */
        .header { 
            text-align: center; 
            padding: 3rem 2rem 2rem;
            border-bottom: 1px solid #e5e7eb;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .header h1 {
            font-size: clamp(1.8rem, 4vw, 2.5rem);
            margin-bottom: 1rem;
            line-height: 1.2;
            font-weight: 700;
        }
        
        .header .description {
            font-size: 1.2rem;
            opacity: 0.9;
            max-width: 600px;
            margin: 0 auto;
        }
        
        /* Main Content */
        .main-content {
            padding: 2rem;
            max-width: 1000px;
            margin: 0 auto;
        }
        
        /* Quick Verdict Section */
        .quick-verdict-section {
            margin: 3rem 0;
        }
        
        .verdict-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }
        
        .verdict-card {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            border: 1px solid #e5e7eb;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .verdict-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        
        .verdict-icon {
            font-size: 2rem;
            margin-bottom: 1rem;
        }
        
        .verdict-card h4 {
            color: #1f2937;
            margin-bottom: 0.5rem;
            font-size: 1.1rem;
        }
        
        .verdict-card p {
            color: #6b7280;
            line-height: 1.5;
        }
        
        /* Comparison Table */
        .comparison-table-section {
            margin: 3rem 0;
        }
        
        .table-container {
            overflow-x: auto;
            margin: 1.5rem 0;
            border-radius: 12px;
            border: 1px solid #e5e7eb;
            background: white;
        }
        
        .comparison-table {
            width: 100%;
            border-collapse: collapse;
            min-width: 600px;
        }
        
        .comparison-table th {
            background: #4f46e5;
            color: white;
            font-weight: 600;
            padding: 1.25rem;
            text-align: left;
            font-size: 0.95rem;
        }
        
        .comparison-table td {
            padding: 1.25rem;
            border-bottom: 1px solid #e5e7eb;
        }
        
        .comparison-table tr:last-child td {
            border-bottom: none;
        }
        
        .comparison-table tr:hover {
            background: #f9fafb;
        }
        
        /* Product Analysis */
        .product-analysis {
            background: #f8fafc;
            border-radius: 12px;
            padding: 2rem;
            margin: 2rem 0;
            border: 1px solid #e5e7eb;
        }
        
        .product-header {
            display: flex;
            justify-content: between;
            align-items: start;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .product-header h3 {
            color: #1f2937;
            flex: 1;
            min-width: 200px;
        }
        
        .product-price {
            background: #10b981;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        .product-rating {
            color: #f59e0b;
            font-weight: 600;
        }
        
        /* Responsive Images */
        .responsive-image {
            margin: 1.5rem 0;
            text-align: center;
        }
        
        .responsive-image img {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        
        /* Pros and Cons */
        .pros-cons-section {
            margin: 1.5rem 0;
        }
        
        .pros-list, .cons-list {
            list-style: none;
            padding: 0;
        }
        
        .pros-list li {
            color: #10b981;
            padding: 0.5rem 0;
            display: flex;
            align-items: center;
        }
        
        .pros-list li::before {
            content: "‚úì";
            margin-right: 0.75rem;
            font-weight: bold;
        }
        
        .cons-list li {
            color: #ef4444;
            padding: 0.5rem 0;
            display: flex;
            align-items: center;
        }
        
        .cons-list li::before {
            content: "‚úó";
            margin-right: 0.75rem;
            font-weight: bold;
        }
        
        /* Specifications */
        .specifications {
            margin: 1.5rem 0;
        }
        
        .specs-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .spec-item {
            display: flex;
            justify-content: space-between;
            padding: 0.75rem;
            background: white;
            border-radius: 6px;
            border: 1px solid #e5e7eb;
        }
        
        .spec-label {
            font-weight: 600;
            color: #374151;
        }
        
        .spec-value {
            color: #6b7280;
        }
        
        /* Latest Comparisons */
        .latest-comparisons {
            margin: 4rem 0 2rem;
            padding: 2rem 0;
            border-top: 1px solid #e5e7eb;
        }
        
        .latest-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }
        
        .comparison-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            border: 1px solid #e5e7eb;
            text-decoration: none;
            color: inherit;
            transition: all 0.3s ease;
            display: block;
        }
        
        .comparison-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            border-color: #4f46e5;
            text-decoration: none;
        }
        
        .comparison-card h3 {
            color: #1f2937;
            margin-bottom: 0.75rem;
            font-size: 1.1rem;
            line-height: 1.4;
        }
        
        .comparison-card p {
            color: #6b7280;
            font-size: 0.9rem;
            line-height: 1.5;
        }
        
        /* Buttons and Links */
        .price-button {
            background: #4f46e5;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s ease;
        }
        
        .price-button:hover {
            background: #4338ca;
        }
        
        .back-link {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            color: #4f46e5;
            text-decoration: none;
            font-weight: 600;
            padding: 1rem 2rem;
            border: 2px solid #4f46e5;
            border-radius: 8px;
            transition: all 0.3s ease;
            margin: 2rem auto;
        }
        
        .back-link:hover {
            background: #4f46e5;
            color: white;
        }
        
        /* Ratings */
        .rating {
            font-weight: bold;
        }
        
        .rating.full {
            color: #f59e0b;
        }
        
        .rating.partial {
            color: #f59e0b;
        }
        
        .rating-text {
            color: #6b7280;
            font-size: 0.9rem;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                box-shadow: none;
            }
            
            .header {
                padding: 2rem 1rem 1.5rem;
            }
            
            .main-content {
                padding: 1rem;
            }
            
            .verdict-grid {
                grid-template-columns: 1fr;
            }
            
            .product-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .comparison-table th,
            .comparison-table td {
                padding: 1rem 0.75rem;
            }
            
            .specs-grid {
                grid-template-columns: 1fr;
            }
            
            .latest-grid {
                grid-template-columns: 1fr;
            }
        }
        
        @media (max-width: 480px) {
            .header h1 {
                font-size: 1.5rem;
            }
            
            .header .description {
                font-size: 1rem;
            }
            
            .product-analysis {
                padding: 1.5rem;
            }
        }
        
        /* Utility Classes */
        .text-center {
            text-align: center;
        }
        
        .mt-4 {
            margin-top: 2rem;
        }
        
        .mb-4 {
            margin-bottom: 2rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header" role="banner">
            <h1>${escapeHtml(frontmatter.title || formatSlug(slug))}</h1>
            ${frontmatter.description ? `<p class="description">${escapeHtml(frontmatter.description)}</p>` : ''}
        </header>
        
        <main class="main-content" role="main">
            ${htmlContent}
            
            ${latestComparisonsHTML}
            
            <div class="text-center">
                <a href="/" class="back-link">
                    ‚Üê Back to All Comparisons
                </a>
            </div>
        </main>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Enhanced lazy loading
            const lazyImages = document.querySelectorAll('img[loading="lazy"]');
            
            if ('IntersectionObserver' in window) {
                const imageObserver = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            img.src = img.src;
                            imageObserver.unobserve(img);
                        }
                    });
                });

                lazyImages.forEach(img => imageObserver.observe(img));
            }
            
            // Smooth scrolling for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });
        });
    </script>
</body>
</html>`;
}

function generateLatestComparisonsHTML(latestComparisons) {
    if (latestComparisons.length === 0) return '';
    
    return `
    <section class="latest-comparisons" aria-labelledby="latest-comparisons-title">
        <h2 id="latest-comparisons-title">üîó Latest Comparisons</h2>
        <div class="latest-grid">
            ${latestComparisons.map(comparison => `
            <a href="/comparison/${comparison.slug}" class="comparison-card">
                <h3>${escapeHtml(comparison.title)}</h3>
                ${comparison.description ? `<p>${escapeHtml(comparison.description)}</p>` : ''}
            </a>
            `).join('')}
        </div>
    </section>`;
}

// ==================== HELPER FUNCTIONS ====================

function escapeHtml(unsafe) {
    if (!unsafe) return '';
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

function formatSlug(slug) {
    return slug.split('-').map(word => 
        word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
}

function slugify(text) {
    return text.toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/[\s_-]+/g, '-')
        .replace(/^-+|-+$/g, '');
}

function convertStandardMarkdown(content) {
    return content
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/\n/g, '<br>');
}

function generateComparisonSchemaMarkup(frontmatter, slug, url) {
    const comparisonProducts = frontmatter.comparison_products || [];
    
    return JSON.stringify({
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": frontmatter.title || formatSlug(slug),
        "description": frontmatter.description || 'Detailed product comparison and analysis',
        "image": frontmatter.featured_image || '',
        "datePublished": frontmatter.date || new Date().toISOString(),
        "author": {
            "@type": "Organization",
            "name": "ReviewIndex"
        },
        "publisher": {
            "@type": "Organization",
            "name": "ReviewIndex",
            "logo": {
                "@type": "ImageObject",
                "url": "https://reviewindex.pages.dev/logo.png"
            }
        },
        "mainEntity": {
            "@type": "ItemList",
            "numberOfItems": comparisonProducts.length,
            "itemListElement": comparisonProducts.map((product, index) => ({
                "@type": "ListItem",
                "position": index + 1,
                "item": {
                    "@type": "Product",
                    "name": product
                }
            }))
        }
    }, null, 2);
}

function renderComparisonErrorPage(title, message) {
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <title>${title} - ReviewIndex</title>
    <meta name="robots" content="noindex">
    <style>
        body { 
            font-family: system-ui, sans-serif; 
            text-align: center; 
            padding: 2rem; 
            background: #f5f5f5; 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            min-height: 100vh; 
            margin: 0; 
        }
        .error-container { 
            background: white; 
            padding: 3rem; 
            border-radius: 12px; 
            box-shadow: 0 8px 25px rgba(0,0,0,0.1); 
            max-width: 500px; 
            width: 100%; 
        }
        h1 { 
            color: #dc2626; 
            margin-bottom: 1rem; 
            font-size: 2rem; 
        }
        p { 
            color: #666; 
            margin-bottom: 2rem; 
            line-height: 1.6; 
        }
        a { 
            color: #2563eb; 
            text-decoration: none; 
            font-weight: 600; 
            padding: 0.75rem 1.5rem; 
            border: 2px solid #2563eb; 
            border-radius: 6px; 
            transition: all 0.3s ease; 
        }
        a:hover { 
            background: #2563eb; 
            color: white; 
        }
    </style>
</head>
<body>
    <div class="error-container">
        <h1>‚ö†Ô∏è ${title}</h1>
        <p>${message}</p>
        <a href="/">‚Üê Return to Homepage</a>
    </div>
</body>
</html>`;
    
    return new Response(html, { 
        status: 404,
        headers: { 'Content-Type': 'text/html' }
    });
}
